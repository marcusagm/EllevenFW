<?php

namespace EllevenFw\Library\Network;

use InvalidArgumentException;
use EllevenFw\Library\Network\UploadedFileFactory;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-10-02 at 04:56:55.
 */
class UploadedFileFactoryTest extends \PHPUnit_Framework_TestCase
{

    public function testCreateUploadedFile()
    {
        $file = UploadedFileFactory::createUploadedFile(
            'php://temp',
            0,
            UPLOAD_ERR_OK,
            'foo.bar',
            'text/plain'
        );
        $expected = new UploadedFile('php://temp', 0, UPLOAD_ERR_OK, 'foo.bar', 'text/plain');
        $this->assertEquals($expected, $file);
    }

    public function testNormalizedFilesFromArray()
    {
        $files = array(
            'files' => [
                'tmp_name' => 'php://temp',
                'size'     => 0,
                'error'    => 0,
                'name'     => 'foo.bar',
                'type'     => 'text/plain',
            ]
        );
        $expectedFiles = [
            'files' => new UploadedFile('php://temp', 0, 0, 'foo.bar', 'text/plain')
        ];
        $this->assertEquals($expectedFiles, UploadedFileFactory::normalizeFiles($files));
    }

    public function testNormalizedFilesFromPsrObjects()
    {
        $filesPsr = array(
            'files' => new UploadedFile('php://temp', 0, 0, 'foo.bar', 'text/plain')
        );
        $expectedFilesPsr = [
            'files' => new UploadedFile('php://temp', 0, 0, 'foo.bar', 'text/plain')
        ];
        $this->assertEquals($expectedFilesPsr, UploadedFileFactory::normalizeFiles($filesPsr));
    }

    public function testNormalizedFilesFromMultipleArray()
    {
        $filesMult = array(
            'files' => [
                'files' => [
                    'tmp_name' => 'php://temp',
                    'size'     => 0,
                    'error'    => 0,
                    'name'     => 'foo.bar',
                    'type'     => 'text/plain',
                ]
            ]
        );
        $expectedFilesMult = [
            'files' => [ 'files' => new UploadedFile('php://temp', 0, 0, 'foo.bar', 'text/plain') ]
        ];
        $this->assertEquals($expectedFilesMult, UploadedFileFactory::normalizeFiles($filesMult));
    }

    public function testNormalizeNestedFileSpec()
    {
        $files = [ 'fooFiles' => [
            'tmp_name' => ['file' => 'php://temp'],
            'size'     => ['file' => 0],
            'error'    => ['file' => 0],
            'name'     => ['file' => 'foo.bar'],
            'type'     => ['file' => 'text/plain'],
        ]];
        $expectedFiles = [
            'fooFiles' => [ 'file' => new UploadedFile('php://temp', 0, 0, 'foo.bar', 'text/plain') ]
        ];
        $this->assertEquals($expectedFiles, UploadedFileFactory::normalizeFiles($files));
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testNormalizeWithInvalidValue()
    {
        $files = array('test');
        UploadedFileFactory::normalizeFiles($files);
    }

}
