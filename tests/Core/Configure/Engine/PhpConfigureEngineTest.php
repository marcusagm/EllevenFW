<?php

namespace EllevenFw\Test\Core\Configure\Engine;

use EllevenFw\Core\Configure\Engine\PhpConfigureEngine;
use EllevenFw\Core\Exception\Types\CoreException;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-02 at 18:40:02.
 */
class PhpConfigureEngineTest extends TestCase
{
    /**
     * @var Configure
     */
    protected $path;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->path = APP_CONFIG . 'tests' . DS;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        if (file_exists($this->path . 'invalid.php')) {
            unlink($this->path . 'invalid.php');
        }
    }

    public function testDump()
    {
        $path = $this->path . 'valid.php';
        $engine = new PhpConfigureEngine($path);

        $testPath = $this->path . 'tmp-dump.php';
        $tmpPath = $this->path . 'tmp.php';
        $result = $engine->dump($tmpPath);
        $this->assertTrue($result);

        $this->assertFileEquals($testPath, $tmpPath);

        unlink($tmpPath);
    }

    public function testDumpWithNewData()
    {
        $path = $this->path . 'valid.php';
        $engine = new PhpConfigureEngine($path);

        $data = array(
            'Test' => 'firstTest',
            'Deep' => array(
                'Deeper' => array(
                    'Test' => 'secondTest'
                )
            )
        );
        $engine->write($data, false);

        $tmpPath = $this->path . 'tmp.php';
        $testPath = $this->path . 'tmp-dump-with-new-data.php';
        $engine->dump($tmpPath);

        $this->assertFileEquals($testPath, $tmpPath);

        $engineTmp = new PhpConfigureEngine($tmpPath);
        $result = $engineTmp->read();
        $this->assertEquals($data, $result);

        unlink($tmpPath);
    }

    public function testWriteWithInvalidParam()
    {
        $this->expectException(CoreException::class);
        $this->expectExceptionMessage('O valor informado para adicionar no arquivo de configuração não é um array.');

        $path = $this->path . 'valid.php';
        $engine = new PhpConfigureEngine($path);
        $engine->write('test');
    }

    public function testWriteWithValidParam()
    {
        $path = $this->path . 'valid.php';
        $engine = new PhpConfigureEngine($path);

        $data = array(
            'Test' => 'firstTest',
            'Deep' => array(
                'Deeper' => array(
                    'Test' => 'secondTest'
                )
            )
        );
        $engine->write($data);
        $values = $engine->read();

        $this->assertEquals('value', $values['Json']);
        $this->assertEquals('buried', $values['Deep']['Deeper']['Deepest']);
        $this->assertEquals('firstTest', $values['Test']);
        $this->assertEquals('secondTest', $values['Deep']['Deeper']['Test']);
    }

    public function testWriteWithReplaceContent()
    {
        $path = $this->path . 'valid.php';
        $engine = new PhpConfigureEngine($path);

        $data = array(
            'Test' => 'firstTest',
            'Deep' => array(
                'Deeper' => array(
                    'Test' => 'secondTest'
                )
            )
        );
        $engine->write($data, false);
        $values = $engine->read();

        $this->assertFalse(isset($values['Json']));
        $this->assertFalse(isset($values['Deep']['Deeper']['Deepest']));

        $this->assertTrue(isset($values['Test']));
        $this->assertTrue(isset($values['Deep']['Deeper']['Test']));
    }

    public function testRead()
    {
        $path = $this->path . 'valid.php';
        $engine = new PhpConfigureEngine($path);
        $values = $engine->read();

        $this->assertEquals('value', $values['Json']);
        $this->assertEquals('buried', $values['Deep']['Deeper']['Deepest']);
    }

    public function testReadWithNonExistentFile()
    {
        $this->expectException(CoreException::class);
        $this->expectExceptionMessage('Arquivo de configuração não existente.');

        $path = $this->path . 'nonexistent.php';
        $engine = new PhpConfigureEngine($path);
        $values = $engine->read();

        $this->assertEquals('value', $values['Json']);
        $this->assertEquals('buried', $values['Deep']['Deeper']['Deepest']);
    }

    public function testReadWithInvalidPhp()
    {
        $this->expectException(CoreException::class);
        $this->expectExceptionMessage('Erro ao ler o arquivo de configuração. Não foi possível converte-lo em array.');

        $path = $this->path . 'invalid.php';
        file_put_contents($path, '<?php return "invalid";');
        $engine = new PhpConfigureEngine($path);
        $engine->read();
    }

    public function testReadWithEmptyFile()
    {
        $this->expectException(CoreException::class);
        $this->expectExceptionMessage('Erro ao ler o arquivo de configuração. Não foi possível converte-lo em array.');

        $path = $this->path . 'empty.php';
        $engine = new PhpConfigureEngine($path);
        $engine->read();
    }
}
